# -*- coding: utf-8 -*-
"""EDA_AirbnbListings.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LS1jEoBPUlxsdTQFoMSlyPEucvsLWyZO

**Seattle Airbnb DataAnalysis<br>
by Girish Kumar**

Importing required libraries for the task
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

"""# Data Exploration"""

listing_data = "/content/drive/MyDrive/listings.csv"
df_ld = pd.read_csv(listing_data)

"""

*   Data from the .csv file is loaded and converted into a dataframe
*   path of the listing data is taken as a variable listing_data and
    data from this path is loaded into a dataframe.


"""

df_ld.head()

"""head() gives an overview of the data that we are working with."""

df_ld.shape

"""(3818, 92) it means there are 3818 entries or rows along with 92 attributes or columns."""

df_ld.info()

(df_ld.select_dtypes(include=['int64', 'float64'])).describe()

"""*   In the above code snippet we include only numeric data.
*   describe() provides a statistical overview of the data.

# Data Cleaning
"""

#Checking for columns having atleast one Missing Value
(df_ld.isnull().sum()[df_ld.isnull().sum() > 0]).sort_values(ascending=False)

listings_miss = pd.DataFrame((df_ld.isnull().sum())*100/len(df_ld), columns=['Missing_Values'])
listings_miss[listings_miss['Missing_Values']>75]

"""According to the above observation we can clearly notice that the percentage<br>
of null values are greater than 75 in both square_feet and license attributes.<br>
so, it is ideal to drop them.
"""

C_miss = ['square_feet','license']
for i in C_miss:
    df_ld = df_ld.drop(columns=[i])

#Remove redundent columns
df_ld = df_ld.drop('scrape_id', axis=1)

listings_miss[listings_miss['Missing_Values']>20]

df_ld[['security_deposit','weekly_price','cleaning_fee','monthly_price','price']]

"""From the Above dataframe we can see that there are many Nan values<br>
And also the price type columns are present as object type because of <br>
the currency character.<br>
so we will try to remove the currency character and also the replace the<br>
NaN values with '0' to avoid data inconsistencies.
"""

import re
ld_price = ['security_deposit','weekly_price','cleaning_fee','monthly_price','price']
for i in ld_price:
    df_ld[i].fillna('0',inplace=True)
    df_ld[i] = df_ld[i].str.replace('$','')
    df_ld[i] = df_ld[i].str.replace(',','')
    df_ld[i] = df_ld[i].astype('float')

df_ld[['security_deposit','weekly_price','cleaning_fee','monthly_price','price']]

# Select numeric columns for correlation analysis
numeric_columns = df_ld.select_dtypes(include=['int64', 'float64'])

# Calculate the correlation matrix
corr_mat = numeric_columns.corr()

# Create a heatmap
plt.figure(figsize=(20,40))  # Adjust the figure size as needed
sns.heatmap(corr_mat, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Heatmap for Airbnb Dataset')
plt.show()

"""from the above correlation matrix we can observe that the listing price<br>
is influenced or effected by number of bed,bedrooms,bathrooms and accomadates..etc <br>
we can also see that the number of reviews doesnot actually effect the increase and decrease in prices.

# Visualization
"""

# Group the data by neighborhood and calculate the mean price
mean_price_by_neighb = df_ld.groupby('neighbourhood')['price'].mean()
mean_price_by_neighb.sort_values(ascending=False)

"""Shows the average prices of the rooms <br>
According to the neighbourhood.
"""

# Price Distribution
plt.figure(figsize=(8, 8))
sns.histplot(data=df_ld, x='price', bins=30, kde=True)
plt.title('Price Distribution of Airbnb Listings')
plt.xlabel('Price (USD)')
plt.ylabel('Frequency')
plt.show()

"""the Above analysis shows that more number of bookings taken place<br>
between 60 to 200 dollars.
"""

# Room Type Preferences
plt.figure(figsize=(8, 6))
sns.countplot(data=df_ld, x='room_type', palette='viridis')
plt.title('Room Type Preferences')
plt.xlabel('Room Type')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.show()

"""it shows that more number of booking preferences are for<br>
Entire home/apartment compared to private room or shared room.
"""

#Histogram of review_scores_rating
plt.figure(figsize=(10, 6))
sns.histplot(data=df_ld, x='review_scores_rating', bins=30, kde=True, color='skyblue')
plt.title('Distribution of Review Scores Rating')
plt.xlabel('Review Scores Rating')
plt.ylabel('Frequency')
plt.show()

"""more number of ratings are greater than 8.5 or 85%


"""

# Calculate the distribution of property types
property_type_counts = df_ld['room_type'].value_counts()

plt.figure(figsize=(8, 8))
plt.pie(property_type_counts, labels=property_type_counts.index, autopct='%1.1f%%', startangle=140)
plt.title('Distribution of Property Types')
plt.show()

"""The above visual shows the property distribution in seattle region.<br>
66.6% of property is Entire home/apt,30.4% private room,3.1% shared rooms
"""

# Calculate the distribution of response time
property_type_counts = df_ld['host_response_time'].value_counts()

plt.figure(figsize=(8, 8))
plt.pie(property_type_counts, labels=property_type_counts.index, autopct='%1.1f%%', startangle=140)
plt.title('Distribution of Response Time')
plt.show()

"""The above visual shows the time distribution in which the responses are recieved.<br>
within an hour 51.4%,within a few hours 29.4%,within a day 18.1%,A few days or more 1.2% .
"""

# Calculate the distribution of bed types
property_type_counts = df_ld['bed_type'].value_counts()

plt.figure(figsize=(8, 8))
plt.pie(property_type_counts, labels=property_type_counts.index, autopct='%1.1f%%', startangle=140)
plt.title('Distribution of Bed Types')
plt.show()

"""

The above visual shows the pie chart in which distribution of bed Type preferences are shown.<br>
Real bed as preference 95.8%,couch 0.3%,Airbed 0.7%,Pull-out sofa 1.2%,futon 1.9%.
"""

# Neighbourhood Preferences
plt.figure(figsize=(40, 10))
sns.countplot(data=df_ld, x='neighbourhood', palette='viridis')
plt.title('Likely Neighbourhood')
plt.xlabel('Neighbourhood')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.show()

"""From the above visual we can see that the most popular neighbourhood for <br>
bookings is Capital hill and then Ballard,Belltown etc.
"""